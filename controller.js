const { si9n } = require("node_modules/si9n-sdk/dist/si9n-sdk.min.js")

class Controller {
    init(model) {
        this.model = Controller.model;
    }
    model = Controller;
    static changeBrightness(brightnessLevel) {
        let brightness = [0x55, 0xAA, 0x00, 0x00, 0xFE, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0xAA, 0xFF, 0x5A];
        brightness[brightness.length - 3] = brightnessLevel;
        if (currentBrightnessValue > 170) {
            brightness[brightness.length - 2] = brightnessLevel + 85 - 256;
            brightness[brightness.length - 1] = 0x5B;
        } else {
            brightness[brightness.length - 2] = brightnessLevel + 85;
            brightness[brightness.length - 1] = 0x5A;
        }
        si9n.displayMessage({ raw: brightness });
    }

    static testPattern(pattern) {
        si9n.displayMessage({ raw: pattern });
    }

    static changePreset(preset) {
        switch (model) {
            case Controller.VX6s:
                preset_VX6s(preset);
                break;
            case Controller.VX4s:
                preset_VX4s(preset);
                break;
            case Controller.VX1000:
                preset_VX1000(preset);
                break;
            case Controller.novaProUHDJr:
                preset_NovaProUHDJr(preset);
                break;
            case Controller.J6:
                preset_J6(preset);
                break;
            default:
                console.log("Controller model not found!");
                break;
        }
    }
}

const Controller = {
    VX1000: "VX1000",
    VX6s: "VX6s",
    VX4s: "VX4s",
    novaProHD: "NovaProHD",
    novaProUHDJr: "NovaProUHDJr",
    mctrl4k: "MCTRL4K",
    J6: "J6"
};

const Patterns = {
    Red: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x02, 0xDA, 0x58],
    Green: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x03, 0xDB, 0x58],
    Blue: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x04, 0xDC, 0x58],
    White: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x05, 0xDD, 0x58],
    Horizontal: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x06, 0xDE, 0x58],
    Vertical: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x07, 0xDF, 0x58],
    Diagonal: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x08, 0xE0, 0x58],
    GrayScale: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x09, 0xE1, 0x58],
    AgingAll: [0x55, 0xAA, 0x00, 0x80, 0xFE, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x01, 0x01, 0x00, 0x02, 0x01, 0x00, 0x0A, 0xE2, 0x58]
};

const WorkingModes_VX6s = {
    Direct: [0x55, 0xAA, 0x00, 0xEC, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x80, 0x57],
    Switcher: [0x55, 0xAA, 0x00, 0x1E, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x00, 0x13, 0x01, 0x00, 0x01, 0xB3, 0x56]
}

const Inputs_VX6s = {
    Window1HDMI1: [0x55, 0xAA, 0x00, 0x88, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x02, 0x13, 0x03, 0x00, 0x00, 0x00, 0x11, 0x17, 0x57],
    Window1HDMI2: [0x55, 0xAA, 0x00, 0xA8, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x02, 0x13, 0x03, 0x00, 0x01, 0x00, 0x12, 0x39, 0x57],
    Window1SDI1: [0x55, 0xAA, 0x00, 0xC4, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x02, 0x13, 0x03, 0x00, 0x02, 0x00, 0x31, 0x75, 0x57],
    Window1SDI2: [0x55, 0xAA, 0x00, 0xD4, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x02, 0x13, 0x03, 0x00, 0x03, 0x00, 0x32, 0x87, 0x57],
    Window1DVI1: [0x55, 0xAA, 0x00, 0xD6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x02, 0x13, 0x03, 0x00, 0x04, 0x00, 0x01, 0x59, 0x57],
    Window1DVI2: [0x55, 0xAA, 0x00, 0xD7, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x02, 0x13, 0x03, 0x00, 0x06, 0x00, 0x02, 0x5D, 0x57],
    Window1USB: [0x55, 0xAA, 0x00, 0xD9, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x02, 0x13, 0x03, 0x00, 0x07, 0x00, 0xA0, 0xFE, 0x57],

    Window2HDMI1: [0x55, 0xAA, 0x00, 0x47, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x02, 0x13, 0x03, 0x00, 0x00, 0x01, 0x11, 0x07, 0x57],
    Window2HDMI2: [0x55, 0xAA, 0x00, 0x55, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x02, 0x13, 0x03, 0x00, 0x01, 0x01, 0x12, 0x17, 0x57],
    Window2SDI1: [0x55, 0xAA, 0x00, 0x56, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x02, 0x13, 0x03, 0x00, 0x02, 0x01, 0x31, 0x38, 0x57],
    Window2SDI2: [0x55, 0xAA, 0x00, 0x58, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x02, 0x13, 0x03, 0x00, 0x03, 0x01, 0x32, 0x3C, 0x57],
    Window2DVI1: [0x55, 0xAA, 0x00, 0x59, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x02, 0x13, 0x03, 0x00, 0x04, 0x01, 0x01, 0x0D, 0x57],
    Window2DVI2: [0x55, 0xAA, 0x00, 0x5A, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x02, 0x13, 0x03, 0x00, 0x06, 0x01, 0x02, 0x11, 0x57],
    Window2USB: [0x55, 0xAA, 0x00, 0x5C, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x02, 0x13, 0x03, 0x00, 0x07, 0x01, 0xA0, 0xB2, 0x57],

    Window3HDMI1: [0x55, 0xAA, 0x00, 0xA2, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x00, 0x02, 0x13, 0x03, 0x00, 0x00, 0x02, 0x11, 0x93, 0x57],
    Window3HDMI2: [0x55, 0xAA, 0x00, 0xA3, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x00, 0x02, 0x13, 0x03, 0x00, 0x01, 0x02, 0x12, 0x96, 0x57],
    Window3SDI1: [0x55, 0xAA, 0x00, 0xA5, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x00, 0x02, 0x13, 0x03, 0x00, 0x02, 0x02, 0x31, 0xB8, 0x57],
    Window3SDI2: [0x55, 0xAA, 0x00, 0xA6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x00, 0x02, 0x13, 0x03, 0x00, 0x03, 0x02, 0x32, 0xBB, 0x57],
    Window3DVI1: [0x55, 0xAA, 0x00, 0xA7, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x00, 0x02, 0x13, 0x03, 0x00, 0x04, 0x02, 0x01, 0x8C, 0x57],
    Window3DVI2: [0x55, 0xAA, 0x00, 0xA9, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x00, 0x02, 0x13, 0x03, 0x00, 0x06, 0x02, 0x02, 0x91, 0x57],
    Window3USB: [0x55, 0xAA, 0x00, 0xAA, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x00, 0x02, 0x13, 0x03, 0x00, 0x07, 0x02, 0xA0, 0x31, 0x58]
}

function preset_VX6s(preset) {
    const max = 16;
    const mix = 0;
    if (isNumber(preset)) {
        var presetHex = [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x00, 0x05, 0x16]//21;
        if (preset <= max && preset > min) {
            presetHex[18] = preset - 1;
            if (preset < 12) {
                presetHex[19] = 5 + preset - 1;
            } else {
                presetHex[19] = 186 + preset;
            }

            if (preset > 6) {
                presetHex[20] = 0x56;
            }

            si9n.displayMessage({ raw: presetHex });
        }

    }
}

function preset_VX4s(preset) {
    if (isNumber(number)) {
        var presetHex = [0x55, 0xAA, 0x00, 0x2E, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x70, 0x00, 0x20, 0x02, 0x01, 0x00, 0x00, 0x15, 0x57]//21;
        if (preset > 0 && preset <= 10) {
            presetHex[18] = preset;

            if (preset < 6) {
                presetHex[3] = 0x2E;
                presetHex[19] = 20 + preset
            } else {
                presetHex[3] = 0x95;
                presetHex[19] = 176 + preset;
            }

            si9n.displayMessage({ raw: presetHex });
        }
    }
}

function preset_VX1000(preset) {
    const max = 10;
    const min = 0;
    if (isNumber(preset)) {
        var presetHex = [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x00, 0xBA, 0x56]//21;
        if (preset > min && preset <= max) {
            presetHex[18] = preset - 1;
            presetHex[19] = 185 + preset;
            si9n.displayMessage({ raw: presetHex });
        }
    }
}

function preset_NovaProUHDJr(preset) {
    if (isNumber(preset)) {
        if (preset > 0 && preset <= 10) {
            let presets = [[0x55, 0xAA, 0x00, 0x35, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x00, 0xEF, 0x56],
            [0x55, 0xAA, 0x00, 0x2F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x01, 0xEA, 0x56],
            [0x55, 0xAA, 0x00, 0x30, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x02, 0xEC, 0x56],
            [0x55, 0xAA, 0x00, 0x2E, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x03, 0xEB, 0x56],
            [0x55, 0xAA, 0x00, 0x48, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x04, 0x06, 0x57],
            [0x55, 0xAA, 0x00, 0x4D, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x05, 0x0C, 0x57],
            [0x55, 0xAA, 0x00, 0x49, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x06, 0x09, 0x57],
            [0x55, 0xAA, 0x00, 0x46, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x07, 0x07, 0x57],
            [0x55, 0xAA, 0x00, 0x4D, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x08, 0x0F, 0x57],
            [0x55, 0xAA, 0x00, 0x4C, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x09, 0x0F, 0x57]
            ];
            si9n.displayMessage({ raw: presets[preset] });
        }
    }
}

function preset_J6(preset) {
    if (isNumber(preset)) {
        if (preset > 0 && preset <= 32) {
            var presetHex = [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x51, 0x13, 0x01, 0x00, 0x00, 0xBA, 0x56];
            if (preset > 9) {
                presetHex[19] = 0xC3;
            } else {
                presetHex[19] = 185 + preset;
            }
            presetHex[18] = preset - 1;

            si9n.displayMessage({ raw: presetHex });
        }
    }
}


function isNumber(number) {
    return typeof (number) === 'number';
}


const DisplayModes_VX6s = {
    Normal: [0x55, 0xAA, 0x00, 0x38, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x13, 0x01, 0x00, 0x03, 0xA7, 0x56],
    Freeze: [0x55, 0xAA, 0x00, 0x35, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x13, 0x01, 0x00, 0x03, 0xA5, 0x56],
    Black: [0x55, 0xAA, 0x00, 0x37, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x13, 0x01, 0x00, 0x03, 0xA2, 0x56]
}

const DisplayModes_VX4s = {
    Normal: [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x50, 0x00, 0x20, 0x02, 0x01, 0x00, 0x00, 0xC7, 0x56],
    Freeze: [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x50, 0x00, 0x20, 0x02, 0x01, 0x00, 0x01, 0xC8, 0x56],
    Black: [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x50, 0x00, 0x20, 0x02, 0x01, 0x00, 0x02, 0xC9, 0x56]
}

const DisplayModes_VX1000 = {
    Normal: [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x13, 0x02, 0x00, 0x03, 0x00, 0x70, 0x56],
    Freeze: [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x13, 0x02, 0x00, 0x04, 0x00, 0x71, 0x56],
    Black: [0x55, 0xAA, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x13, 0x02, 0x00, 0x05, 0x00, 0x72, 0x56]
}

function createPresetsPicker(model) {
    for (const [key, value] of Object.entries(DisplayModes_VX1000)) {
        const keyElement = document.createElement("p");
        keyElement.textContent = `Name: ${key}`;
        container.appendChild(keyElement);

        const valueElement = document.createElement("p");
        valueElement.textContent = `Value: ${value.join(', ')}`;
        container.appendChild(valueElement);
    }
}